廖雪峰python
之前已经学习c++，记录一些不太一样的东西就可以：
print(r'''month\n
          week''');
          
NULL变成None

字符串" ",' '都可以，str.upper()只是重新生成一个大写的字符串，并没有改变原来字符串，并且str还是指向原来的字符串

a='ABC'
在内存中创建了一个'ABC'的字符串；
在内存中创建了一个名为a的变量，并把它指向'ABC'

在Python中，通常用全部大写的变量名表示常量

除法/和// 10/3=3.0，9/3=3.0，10//3=3 （//整数地板除）

内存中使用unicode(可以表示中文，但是比原来ascii的英文字符变长了,但是和unicode相比，ascii又不能表示中文)，于是为了存储节省空间，采用utf_8来存储，这样英文字符又可以用一个字节来表示了，unicode是一律两个字节。

"%08d" % 4   00000004(7个零)       "%.2f" % 1.454  1.45

format格式：
>>> 'Hello, {0}, 成绩提升了 {1:.1f}%'.format('小明', 17.125)
'Hello, 小明, 成绩提升了 17.1%'

list:
classmates = ['Michael', 'Bob', 'Tracy']  
最后一个元素：classmates[-1]:'Tracy'
不能越界，不然报错  0-2  -1——-3
len(classmates):3
尾部加入：classmates.append('Adam')   把元素插入到指定的位置，比如索引号为1的位置：classmates.insert(1, 'Jack')
要删除list末尾的元素，用pop()方法：    classmates.pop()          要删除指定位置的元素，用pop(i)方法，其中i是索引位置：classmates.pop(1)
list里面的元素的数据类型也可以不同：L = ['Apple', 123, True]

tuple：
classmates = ('Michael', 'Bob', 'Tracy')
和list差不多，但是更加安全
t = (1)  数学计算 t=1
只有1个元素的tuple定义时必须加一个逗号,，来消除歧义： collection(1,)
“可变”tuple:t = ('a', 'b', ['A', 'B'])，不改变tuple对list的指向关系就可以，list变化管不住

if else 判断语句后面记得加冒号，注意缩进，不然会有语法错误

for in(list和tuple的)   range(101) 0-100   
while循环，break和continue一样

dictionary(dict) 键-值（key-value）
判断key是否存在 1.'Thomas' in d（True or False） 2.d.get('Thomas', -1)
要删除一个key，用pop(key)方法

变量和对象的概念，对象1，2，3，"dfhadjd",["dffd",12,7.8]，实实在在存储的东西应该就是对象所在，而a=1,a就是一个指向对象1的变量

set:类似dict 但是只有key，没有value,key不能重复，s.add(key),s.remove(key).
set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集&、并集|等操作

自定义函数参数个数，python解释器会检查，但是函数参数类型不会检查，要自己写检查代码：
 if not isinstance(x, (int, float)):
        raise TypeError('bad operand type')

函数发挥多个返回值，其实只是一个tuple   :   x, y = move(100, 100, 60, math.pi / 6)

函数默认参数     默认参数必须指向不变对象，不然有奇效
可变参数(list/tuple) calc(*nums)
关键字参数(dict):
>>> extra = {'city': 'Beijing', 'job': 'Engineer'}
>>> person('Jack', 24, **extra)
可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。而关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict

命名关键字参数:限制传入的关键字参数：
只接收city和job作为关键字参数：def person(name, age, *, city, job) *加，
如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*了：def person(name, age, *args, city, job)
使用命名关键字参数时，要特别注意，如果没有可变参数，就必须加一个*作为特殊分隔符。如果缺少*，Python解释器将无法识别位置参数和命名关键字参数：
def person(name, age, city, job):
    # 缺少 *，city和job被视为位置参数
    pass

限制发挥的就是命名关键字，不拘一格的就是关键字参数。

参数混搭：要遵循顺序：必选参数（位置参数），默认参数，可变参数（*args），命令关键词参数,关键词参数（**）
在函数调用的时候，Python解释器自动按照参数位置和参数名把对应的参数传进去。
但是，任何函数都可以通过类似func(*args, **kw)的形式调用它，无论它的参数是如何定义的，我们的参数会被拆开解释

解决递归调用栈溢出的方法是通过尾递归优化：
尾递归是指，在函数返回的时候，调用自身本身，并且，return语句不能包含表达式。这样，编译器或者解释器就可以把尾递归做优化，使递归本身无论调用多少次，都只占用一个栈帧，不会出现栈溢出的情况。
Python标准的解释器没有针对尾递归做优化，任何递归函数都存在栈溢出的问题。

slice:L[0:3] (从索引0开始取，直到索引3为止) 
如果第一个索引是0，还可以省略:L[:3]
倒数切片:L[-3:-1]:  -3,-2,没有-1  后10个数L[-10:]   L[:20:2] L[::10]
tuple也可以用切片操作，只是操作的结果仍是tuple
字符串也可以用切片操作，只是操作结果仍是字符串:Python没有针对字符串的截取函数，只需要切片一个操作就可以完成，非常简单
字符串反转：temp=s[::-1]

迭代： for key in dict:    for value in dict:
字符串也是可迭代对象，因此，也可以作用于for循环
判断一个对象是可迭代对象:
>>> from collections import Iterable
>>> isinstance('abc', Iterable) # str是否可迭代

Python内置的enumerate函数可以把一个list变成索引-元素对，这样就可以在for循环中同时迭代索引和元素本身：
>>> for i, value in enumerate(['A', 'B', 'C']):
...     print(i, value)
...
0 A
1 B
2 C

None和其他一切东西比较都是False ,()==None =False,None就是一种特殊类型None Type,不是零，也不代表空
p=(1.2,4);
p=None; #p不会变成空tuple，而是变成None

列表生成式:
[x * x for x in range(1, 11)],[x * x for x in range(1, 11) if x % 2 == 0],[m + n for m in 'ABC' for n in 'XYZ'],[s.lower() for s in L]
[x+y for x in L1 for y in L2]注意是嵌套循环！！！不是同时迭代
列表生成式也可以使用两个变量来生成list:[k + '=' + v for k, v in d.items()]，是同时迭代

生成器generator：
创建L和g的区别仅在于最外层的[]和()，L是一个list，而g是一个generator。
正确的方法是使用for循环，因为generator也是可迭代对象:
g=(x*x for x in range(10));
for n in g:
    print(n);
    
while True:无限循环
字典键冲突了，不要出现重复的key-value
两个list值相加：[x+y for x,y in zip(L1,L2)]，用zip才不会出现嵌套循环

可以直接作用于for循环的数据类型有以下几种：
一类是集合数据类型，如list、tuple、dict、set、str等；
一类是generator，包括生成器和带yield的generator function。
这些可以直接作用于for循环的对象统称为可迭代对象：Iterable。
可以使用isinstance()判断一个对象是否是Iterable对象

可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator
Python的Iterator对象表示的是一个数据流，Iterator对象可以被next()函数调用并不断返回下一个数据，直到没有数据时抛出StopIteration错误
生成器都是Iterator对象，但list、dict、str虽然是Iterable，却不是Iterator。
把list、dict、str等Iterable变成Iterator可以使用iter()函数。

高阶函数：
map:map生成一个迭代器，要有限穷举的话使用list(map(fn,sub_list))，list强迫惰性iterator完成计算
reduce:from functools import reduce,reduce产生一个结果
filter:过滤函数，然后根据返回值是True还是False决定保留还是丢弃该元素，filter也是一个迭代器
sort():高级排序,sort(list,key=by_xxx,reverse=True)，对每个元素作用key函数后再按照结果排序。

返回一个函数时，牢记该函数并未执行，返回函数中不要引用任何可能会变化的变量。
def count():
    fs = []
    for i in range(1, 4):
        def f():
             return i*i
        fs.append(f)
    return fs  #返回一个函数list

f1, f2, f3 = count() #列表的赋值

如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变：
def count():
    def f(j):
        def g():
            return j*j
        return g
    fs = []
    for i in range(1, 4):
        fs.append(f(i)) # f(i)立刻被执行，因此i的当前值被传入f()
    return fs
    
UnboundLocalError： local variable 'xxx' referenced before assignment:
子函数使用并修改父函数的变量，需要声明global，不然还是使用list方法:s=[0]:
def createCounter():
    count=[0];
    def counter():
        count[0]+=1;
        return count[0];
    return counter;

匿名函数lambda

装饰器：
import functools
def log(func):
    @functools.wraps(func)
    def wrapper(*args,**kw):
        #装饰语句
        return func(*args,**kw)
    return wrapper
因为返回的那个wrapper()函数名字就是'wrapper'，所以，需要把原始函数的__name__等属性复制到wrapper()函数中，否则，有些依赖函数签名的代码执行就会出错。
如果,log需要参数，引入三层嵌套
@log加到被装饰的函数的定义前面

偏函数：
当函数的参数个数太多，需要简化时，使用functools.partial可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单。

模块：

