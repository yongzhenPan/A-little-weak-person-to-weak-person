类：
class classmate(object):
    
    def __init__(self,name,age):
        self.name=name
        self.age=age   #在__init__方法内部，就可以把各种属性绑定到self
        
     def print_name(self)
         print("my name is %s" % self.name)
和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量self，并且，调用时，不用传递该参数。除此之外，类的方法和普通函数没有什么区别，所以，你仍然可以用默认参数、可变参数、关键字参数和命名关键字参数。

和静态语言不同，Python允许对实例变量绑定任何数据，也就是说，对于两个实例变量，虽然它们都是同一个类的不同实例，但拥有的变量名称都可能不同：
实例变量可以自己随意绑定
>>> bart = Student('Bart Simpson', 59)
>>> lisa = Student('Lisa Simpson', 87)
>>> bart.age = 8
>>> bart.age
8
>>> lisa.age
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'Student' object has no attribute 'age'

访问限制：
一个类的private变量 建立变量的时候使用self__name，就是把name声明成_Student__name,外部使用时候变量名应该是_Student__name,而不是__name，如果你使用
实例.__name，实际上是新增加一个名为__name的变量，与_Student__name无关
封装起来的变量用get_name,set_name函数进行间接访问和修改

继承：
当子类和父类都存在相同的run()方法时，我们说，子类的run()覆盖了父类的run()，在代码运行的时候，总是会调用子类的run()。这样，我们就获得了继承的另一个好处：多态。
多态：多态的好处就是，当我们需要传入Dog、Cat、Tortoise……时，我们只需要接收Animal类型就可以了，因为Dog、Cat、Tortoise……都是Animal类型，然后，按照Animal类型进行操作即可。由于Animal类型有run()方法，因此，传入的任意类型，只要是Animal类或者子类，就会自动调用实际类型的run()方法，这就是多态的意思。

动态语言的多态特点：宽口的多态
对于静态语言（例如Java）来说，如果需要传入Animal类型，则传入的对象必须是Animal类型或者它的子类，否则，将无法调用run()方法。

对于Python这样的动态语言来说，则不一定需要传入Animal类型。我们只需要保证传入的对象有一个run()方法就可以了：

class Timer(object):
    def run(self):
        print('Start...')
这就是动态语言的“鸭子类型”，它并不要求严格的继承体系，一个对象只要“看起来像鸭子，走起路来像鸭子”，那它就可以被看做是鸭子。

Python的“file-like object“就是一种鸭子类型。对真正的文件对象，它有一个read()方法，返回其内容。但是，许多对象，只要有read()方法，都被视为“file-like object“。许多函数接收的参数就是“file-like object“，你不一定要传入真正的文件对象，完全可以传入任何实现了read()方法的对象。

变量类型判断：
总是优先使用isinstance()判断类型，可以将指定类型及其子类“一网打尽”。

dir():获取对象属性和方法
特殊属性和方法__xxx__:方便调用的写法 ，可以xxx(object)这种方式调用
仅仅把属性和方法列出来是不够的，配合getattr()、setattr()以及hasattr()，我们可以直接操作一个对象的状态

给实例绑定属性的方法是通过实例变量，或者通过self变量（都是实例）
如果给类添加属性，应该是通过：
class Student(object):
    name = 'Student'
实例属性和类属性：由于实例属性优先级比类属性高，因此，它会屏蔽掉类的name属性
                 实例属性属于各个实例所有，互不干扰；
                 类属性属于类所有，所有实例共享一个属性；
                 不要对实例属性和类属性使用相同的名字，否则将产生难以发现的错误。
                 
                 
python高级面向对象：

使用__slots__：定义一个特殊的__slots__变量，来限制该class实例能添加的属性
              使用__slots__要注意，__slots__定义的属性仅对当前类实例起作用，对继承的子类是不起作用的
              除非在子类中也定义__slots__，这样，子类实例允许定义的属性就是自身的__slots__加上父类的__slots__
              
使用@property：进一步精简代码，将原本用于封装属性的函数(setter,getter)也变成了属性来用，使用@property:
    @property
    def score(self):
        return self._score

    @score.setter
    def score(self, value):
        if not isinstance(value, int):
            raise ValueError('score must be an integer!')
        if value < 0 or value > 100:
            raise ValueError('score must between 0 ~ 100!')
        self._score = value
 还可以定义只读属性，只定义getter方法，不定义setter方法就是一个只读属性：
 self_xxx 
 
 多重继承(MixIn):如果需要“混入”额外的功能，通过多重继承就可以实现
 MixIn的目的就是给一个类增加多个功能，这样，在设计类的时候，我们优先考虑通过多重继承来组合多个MixIn的功能，而不是设计多层次的复杂的继承关系。
 class Dog(Mammal, RunnableMixIn, CarnivorousMixIn):
 一个主父类，接下全部MixIn
    pass
    
定制类：
__slots__ ,__len__,__str__,__iter__(for in,__next__),__getitem__,__getattr__,__call__
直接显示变量调用的不是__str__()，而是__repr__()，两者的区别是__str__()返回用户看到的字符串，而__repr__()返回程序开发者看到的字符串，也就是说，__repr__()是为调试服务的。
通过callable()函数，我们就可以判断一个对象是否是“可调用”对象。

枚举类：value属性则是自动赋给成员的int常量，默认从1开始计数。
from enum import Enum
@unique
class Weekday(Enum):
    Mon=1
    Tue=2
    ......
既可以用成员名称引用枚举常量，又可以直接根据value的值获得枚举常量:
Weekday(1),Weekday['Mon'],Weekday.Mon

Hello是一个class，它的类型就是type，而h是一个实例，它的类型就是class Hello
metaclass，直译为元类，简单的解释就是：
当我们定义了类以后，就可以根据这个类创建出实例，所以：先定义类，然后创建实例。
但是如果我们想创建出类呢？那就必须根据metaclass创建出类，所以：先定义metaclass，然后创建类。
连接起来就是：先定义metaclass，就可以创建类，最后创建实例。
所以，metaclass允许你创建类或者修改类。换句话说，你可以把类看成是metaclass创建出来的“实例”。

元类这个地方先跳过，不过这里是精华所在，来日再补上！

后面的那些高级概念功能就先不看了，先到这里，以后有机会补上来，现在先去爬虫了。
